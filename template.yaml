AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Problem Solver Game - Amazon Q CLI Integration

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    Environment:
      Variables:
        PYTHONPATH: /var/runtime

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name
  
  ProjectName:
    Type: String
    Default: aws-problem-solver-game
    Description: Project name for resource naming
  
  CustomDomain:
    Type: String
    Default: ""
    Description: Custom domain name (optional)
  
  CorsOrigins:
    Type: String
    Default: "*"
    Description: CORS allowed origins
  
  EnhancedMonitoring:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: Enable enhanced monitoring
  
  XRayTracing:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: Enable X-Ray tracing

Conditions:
  IsProduction: !Equals [!Ref Environment, "prod"]
  HasCustomDomain: !Not [!Equals [!Ref CustomDomain, ""]]
  EnableEnhancedMonitoring: !Equals [!Ref EnhancedMonitoring, "true"]
  EnableXRayTracing: !Equals [!Ref XRayTracing, "true"]

Resources:
  # API Gateway
  GameAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: !Sub "'${CorsOrigins}'"
      TracingConfig:
        TracingEnabled: !If [EnableXRayTracing, true, false]
      DefinitionBody:
        swagger: '2.0'
        info:
          title: !Sub '${ProjectName} API'
          version: '1.0'
        paths:
          /hints:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HintProviderFunction.Arn}/invocations'
                httpMethod: POST
                type: aws_proxy
              responses:
                '200':
                  description: Success
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
            options:
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HintProviderFunction.Arn}/invocations'
                httpMethod: POST
                type: aws_proxy
              responses:
                '200':
                  description: Success
                  headers:
                    Access-Control-Allow-Origin:
                      type: string

  # Lambda Functions
  HintProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-hint-provider-${Environment}'
      CodeUri: src/lambda_functions/
      Handler: hint_provider.lambda_handler
      Description: Amazon Q CLI를 활용한 힌트 제공 시스템
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          PROJECT_NAME: !Ref ProjectName
          DYNAMODB_TABLE: !Ref GameDataTable
      Events:
        HintAPI:
          Type: Api
          Properties:
            RestApiId: !Ref GameAPI
            Path: /hints
            Method: post
        HintAPIOptions:
          Type: Api
          Properties:
            RestApiId: !Ref GameAPI
            Path: /hints
            Method: options
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: !GetAtt GameDataTable.Arn
      Tracing: !If [EnableXRayTracing, Active, PassThrough]

  # DynamoDB Tables
  GameDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-data-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProduction, true, false]
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for static assets
  GameAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-assets-${Environment}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3600
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Sub '/aws/s3/${ProjectName}-${Environment}'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket Policy
  GameAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GameAssetsBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${GameAssetsBucket}/*'

  # CloudFront Distribution
  GameCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt GameAssetsBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        Comment: !Sub '${ProjectName} CDN - ${Environment}'
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          DefaultTTL: !If [IsProduction, 86400, 300]
          MaxTTL: !If [IsProduction, 31536000, 3600]
        PriceClass: !If [IsProduction, PriceClass_All, PriceClass_100]
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        Logging: !If
          - EnableEnhancedMonitoring
          - Bucket: !GetAtt LoggingBucket.DomainName
            Prefix: cloudfront-logs/
          - !Ref AWS::NoValue
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Logging Bucket (only for enhanced monitoring)
  LoggingBucket:
    Type: AWS::S3::Bucket
    Condition: EnableEnhancedMonitoring
    Properties:
      BucketName: !Sub '${ProjectName}-logs-${Environment}-${AWS::AccountId}'
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: !If [IsProduction, 90, 30]

  # CloudWatch Log Groups
  HintProviderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-hint-provider-${Environment}'
      RetentionInDays: !If [IsProduction, 30, 7]

  # CloudWatch Alarms (for production)
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-HighErrorRate'
      AlarmDescription: 'High error rate detected'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref HintProviderFunction

  HighLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-HighLatency'
      AlarmDescription: 'High latency detected'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref HintProviderFunction

Outputs:
  GameAPIUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${GameAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-GameAPIUrl'

  HintProviderFunctionArn:
    Description: Hint Provider Lambda Function ARN
    Value: !GetAtt HintProviderFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-HintProviderFunctionArn'

  GameAssetsBucketName:
    Description: S3 Bucket for game assets
    Value: !Ref GameAssetsBucket
    Export:
      Name: !Sub '${AWS::StackName}-GameAssetsBucketName'

  GameCDNUrl:
    Description: CloudFront distribution URL
    Value: !GetAtt GameCDN.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-GameCDNUrl'

  GameCDNDistributionId:
    Description: CloudFront distribution ID
    Value: !Ref GameCDN
    Export:
      Name: !Sub '${AWS::StackName}-GameCDNDistributionId'

  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref GameDataTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableName'

  GameURL:
    Description: Game access URL
    Value: !Sub 'https://${GameCDN.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-GameURL'
